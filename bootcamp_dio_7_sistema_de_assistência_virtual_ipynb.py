# -*- coding: utf-8 -*-
"""Bootcamp DIO - 7 - Sistema de Assist√™ncia Virtual.ipynb.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ac9h4Rx-oe7w1uL2ko1tVVJASZoP3RFK

# Sistema de Assist√™ncia Virtual

O objetivo desse c√≥digo consiste em criar um assistente virtual com Processamento de Linguagem Natural (PLN), incluindo:

Text-to-Speech (TTS) ‚Üí Transformar texto em √°udio

Speech-to-Text (STT) ‚Üí Transformar √°udio (voz) em texto

Automa√ß√£o por comandos de voz ‚Üí Executar a√ß√µes como pesquisar no Wikipedia, abrir o YouTube e localizar farm√°cias pr√≥ximas

### M√≥dulo TTS (Texto para √Åudio)
"""

# Instalando a biblioteca gTTS

! pip install gTTS

# Importando a biblioteca gTTS

from gtts import gTTS

# Rodando o m√≥dulo com inputs do usu√°rio para o texto e o idioma
text_to_say = input("Digite o texto para converter em fala: ")

# Escolher idioma (opcional - pt como padr√£o)
idiomas = {"1": "pt", "2": "en", "3": "es", "4": "fr"}
print("\nEscolha o idioma:\n1 - Portugu√™s\n2 - English\n3 - Espa√±ol\n4 - Fran√ßais")
idioma_escolhido = input("Digite o n√∫mero do idioma: ")

# Definir idioma (padr√£o: pt-BR)
language = idiomas.get(idioma_escolhido, "pt")

# Criar √°udio
gtts_object = gTTS(text=text_to_say, lang=language, slow=False)
gtts_object.save("audio.mp3")

# Reproduzindo o √°udio

from IPython.display import Audio

Audio("/content/audio.mp3")

"""### M√≥dulo STT (√Åudio para texto)"""

# Instalando a biblioteca Speech Recognition

!pip install SpeechRecognition pydub

# Utilizando JavaScript para capturar audio por meio do microfone do dispositivo

from google.colab import output
import base64
from IPython.display import Javascript, display, HTML

# C√≥digo JavaScript para capturar √°udio com bot√µes
js = Javascript("""
let mediaRecorder;
let audioChunks = [];

async function startRecording() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);

    mediaRecorder.ondataavailable = event => {
        audioChunks.push(event.data);
    };

    mediaRecorder.onstop = async () => {
        const blob = new Blob(audioChunks, { type: 'audio/wav' });
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = () => {
            google.colab.kernel.invokeFunction('notebook.save_audio', [reader.result], {});
        };
    };

    audioChunks = [];
    mediaRecorder.start();
    document.getElementById("status").innerText = "üéô Gravando...";
}

function stopRecording() {
    mediaRecorder.stop();
    document.getElementById("status").innerText = "‚èπ Grava√ß√£o finalizada!";
}

// Criando bot√µes no Colab
let container = document.createElement("div");
container.innerHTML = `
    <button onclick="startRecording()">üéô Iniciar Grava√ß√£o</button>
    <button onclick="stopRecording()">‚èπ Parar Grava√ß√£o</button>
    <p id="status">üî¥ Aguardando...</p>
`;
document.body.appendChild(container);
""")

display(js)

# Fun√ß√£o para salvar √°udio no Colab
def save_audio(js_data):
    audio_bytes = base64.b64decode(js_data.split(',')[1])
    with open("audio.wav", "wb") as f:
        f.write(audio_bytes)
    print("‚úÖ √Åudio salvo como 'audio.wav'")

# Registrar a fun√ß√£o para salvar o √°udio
output.register_callback('notebook.save_audio', save_audio)

# Convertendo o formato capturado pelo JavaScript para WAV
!apt-get install -y ffmpeg
!ffmpeg -i audio.wav -ar 16000 -ac 1 -ab 192k -f wav audio_fixed.wav

import speech_recognition as sr

recognizer = sr.Recognizer()

# Carregar o arquivo de √°udio corrigido
with sr.AudioFile("audio_fixed.wav") as source:
    print("üéß Processando √°udio...")
    audio = recognizer.record(source)

# Reconhecer o texto com Google Speech Recognition
try:
    texto = recognizer.recognize_google(audio, language="pt-BR")
    print("üìù Texto reconhecido:", texto)
except sr.UnknownValueError:
    print("‚ùå N√£o foi poss√≠vel entender o √°udio")
except sr.RequestError:
    print("‚ùå Erro ao conectar com o servi√ßo de reconhecimento")

"""### M√≥dulo Automa√ß√£o por comandos de voz"""

# Importando depend√™ncias

import webbrowser
import datetime
import os
from gtts import gTTS
from pygame import mixer
import base64
import speech_recognition as sr
from google.colab import output
import IPython.display as display
import ipywidgets as widgets

# Capturando √°udio com microfone do dispositivo usando c√≥digo Java

from google.colab import output
import base64
from IPython.display import Javascript, display

# C√≥digo JavaScript para capturar √°udio com bot√µes
js = Javascript("""
let mediaRecorder;
let audioChunks = [];

async function startRecording() {
    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);

    mediaRecorder.ondataavailable = event => {
        audioChunks.push(event.data);
    };

    mediaRecorder.onstop = async () => {
        const blob = new Blob(audioChunks, { type: 'audio/wav' });
        const reader = new FileReader();
        reader.readAsDataURL(blob);
        reader.onloadend = () => {
            google.colab.kernel.invokeFunction('notebook.save_voice_command', [reader.result], {});
        };
    };

    audioChunks = [];
    mediaRecorder.start();
    document.getElementById("status").innerText = "üéô Gravando comando de voz...";
}

function stopRecording() {
    mediaRecorder.stop();
    document.getElementById("status").innerText = "‚èπ Comando de voz capturado!";
}

// Criando bot√µes no Colab
let container = document.createElement("div");
container.innerHTML = `
    <button onclick="startRecording()">üéô Iniciar Comando de Voz</button>
    <button onclick="stopRecording()">‚èπ Parar Comando de Voz</button>
    <p id="status">üî¥ Aguardando comando...</p>
`;
document.body.appendChild(container);
""")

display(js)

# Fun√ß√£o para salvar o comando de voz no Colab
def save_voice_command(js_data):
    audio_bytes = base64.b64decode(js_data.split(',')[1])
    with open("voice_command.wav", "wb") as f:
        f.write(audio_bytes)
    print("‚úÖ Comando de voz salvo como 'voice_command.wav'")

# Registrar a fun√ß√£o para salvar o comando de voz
output.register_callback('notebook.save_voice_command', save_voice_command)

# Convertendo o formato capturado pelo JavaScript para WAV
!apt-get install -y ffmpeg
!ffmpeg -i voice_command.wav -ar 16000 -ac 1 -ab 192k -f wav voice_command_fixed.wav

# Transformando o comando de voz em texto

import speech_recognition as sr

# Fun√ß√£o para converter √°udio em texto
def transcrever_comando():
    recognizer = sr.Recognizer()

    with sr.AudioFile("voice_command_fixed.wav") as source:
        print("üéß Processando comando de voz...")
        audio = recognizer.record(source)

    try:
        comando_texto = recognizer.recognize_google(audio, language="pt-BR")
        print(f"üó£ Comando reconhecido: {comando_texto}")
        return comando_texto.lower()
    except sr.UnknownValueError:
        print("‚ùå N√£o foi poss√≠vel entender o √°udio.")
        return None
    except sr.RequestError:
        print("‚ö†Ô∏è Erro ao conectar ao servi√ßo de reconhecimento de voz.")
        return None

# Rodar o reconhecimento
comando = transcrever_comando()

# Processando o comando

import re

def processar_comando(comando):
    comando = comando.lower()  # Normaliza para min√∫sculas

    if "horas" in comando:
        agora = datetime.datetime.now().strftime("%H:%M")
        resposta = f"Agora s√£o {agora}."

    elif re.search(r"\b(abrir|abra|abre|acesse|acessa|acessar|v√° para|ir para)\b", comando):  # Mais flex√≠vel
        if "google" in comando:
            webbrowser.open("https://www.google.com")
            resposta = "Abrindo o Google."
        elif "youtube" in comando:
            webbrowser.open("https://www.youtube.com")
            resposta = "Abrindo o YouTube."
        else:
            resposta = "N√£o entendi qual site deseja abrir."

    elif "pesquise sobre" in comando:
        termo = comando.replace("pesquise sobre", "").strip()
        try:
            resumo = wikipedia.summary(termo, sentences=1, lang="pt")
            resposta = f"De acordo com a Wikip√©dia: {resumo}"
        except wikipedia.exceptions.DisambiguationError:
            resposta = f"Encontrei v√°rias op√ß√µes para {termo}. Seja mais espec√≠fico."
        except wikipedia.exceptions.PageError:
            resposta = "N√£o encontrei informa√ß√µes sobre esse assunto."

    elif "piada" in comando:
        resposta = pyjokes.get_joke(language="pt")

    elif "sair" in comando:
        resposta = "At√© mais! Encerrando o assistente."
        print(resposta)
        return resposta

    else:
        resposta = "Desculpe, n√£o entendi o comando."

    print("ü§ñ:", resposta)
    return resposta

# Rodando o processamento do comando reconhecido
if comando:
    resposta = processar_comando(comando)